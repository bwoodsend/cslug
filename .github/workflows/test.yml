---
name: Test

on:
  push:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9, 3.6, 3.7, 3.8]
        architecture: ['x64']
        include:
          - os: macos-latest
            python-version: 3.9
            architecture: 'x64'
          - name: Windows
            os: windows-latest
            python-version: 3.9
            architecture: 'x64'
            # I'd like to test 32-bit too but the gcc on Github actions appears
            # to be missing something it needs to compile 32-bit binaries. See:
            # https://github.com/bwoodsend/cslug/runs/1387759265
            # It works perfectly locally.
#          - name: Windows 32-bit
#            os: windows-latest
#            python-version: 3.9
#            architecture: 'x86'

      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:

      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Cache pip cached wheels
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: pip-cache
          key: restore-key
          restore-keys: restore-key

      - name: Install
        run: |
          pip install --cache-dir=pip-cache wheel
          pip install --cache-dir=pip-cache psutil
          pip install --cache-dir=pip-cache .[test]

      - name: Show gcc
        run: gcc -v

      - name: Test
        run: pytest tests --timeout 30

      - name: Test packaging
        run: pytest packaging/test.py

      # gcc is currently just an alias for Clang on modern macOSs so this test
      # is pointless.
      - name: Test Clang
        if: ${{ runner.os == 'macOS' }}
        env:
          CC: clang
        run: |
          pytest tests --timeout 30 && pytest packaging/test.py

      - name: Install TinyCC
        if: ${{ runner.os != 'macOS' }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install tcc
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            choco install tinycc
          fi
        shell: bash

      - name: Test TinyCC
        if: ${{ runner.os != 'macOS' }}
        run: |
          pytest tests --timeout 30 && pytest packaging/test.py
        env:
          CC: tcc
